import pyomo.environ as pyo

# 定义集合
J_values = range(1, 27)  # 地块编号
K_values = range(1, 16)  # 作物编号
I_values = range(1, 9)  # 年份范围

# 创建模型
model = pyo.ConcreteModel()

# 定义集合
model.I = pyo.Set(initialize=I_values)
model.J = pyo.Set(initialize=J_values)
model.K = pyo.Set(initialize=K_values)

# 参数
#亩产量
djk_data ={(1, 1): 400, (1, 2): 500, (1,3):400, (1,4):350, (1,5):415, (1,6):800, (1,7):1000, (1,8):400, (1,9):630, (1,10):525, (1,11):110, (1,12):3000, (1,13):2200, (1,14):420, (1,15):525,
           (2, 1): 400, (2, 2): 500, (2,3):400, (2,4):350, (2,5):415, (2,6):800, (2,7):1000, (2,8):400, (2,9):630, (2,10):525, (2,11):110, (2,12):3000, (2,13):2200, (2,14):420, (2,15):525,
           (3, 1): 400, (3, 2): 500, (3,3):400, (3,4):350, (3,5):415, (3,6):800, (3,7):1000, (3,8):400, (3,9):630, (3,10):525, (3,11):110, (3,12):3000, (3,13):2200, (3,14):420, (3,15):525,
            (4, 1): 400, (4, 2): 500, (4,3):400, (4,4):350, (4,5):415, (4,6):800, (4,7):1000, (4,8):400, (4,9):630, (4,10):525, (4,11):110, (4,12):3000, (4,13):2200, (4,14):420, (4,15):525,
            (5, 1): 400, (5, 2): 500, (5,3):400, (5,4):350, (5,5):415, (5,6):800, (5,7):1000, (5,8):400, (5,9):630, (5,10):525, (5,11):110, (5,12):3000, (5,13):2200, (5,14):420, (5,15):525,
            (6, 1): 400, (6, 2): 500, (6,3):400, (6,4):350, (6,5):415, (6,6):800, (6,7):1000, (6,8):400, (6,9):630, (6,10):525, (6,11):110, (6,12):3000, (6,13):2200, (6,14):420, (6,15):525,
             (7, 1): 380, (7, 2): 475, (7,3):380, (7,4):330, (7,5):395, (7,6):760, (7,7):950, (7,8):380, (7,9):600, (7,10):500, (7,11):105, (7,12):2850, (7,13):2100, (7,14):400, (7,15):500,
             (8, 1): 380, (8, 2): 475, (8,3):380, (8,4):330, (8,5):395, (8,6):760, (8,7):950, (8,8):380, (8,9):600, (8,10):500, (8,11):105, (8,12):2850, (8,13):2100, (8,14):400, (8,15):500,
            (9, 1): 380, (9, 2): 475, (9,3):380, (9,4):330, (9,5):395, (9,6):760, (9,7):950, (9,8):380, (9,9):600, (9,10):500, (9,11):105, (9,12):2850, (9,13):2100, (9,14):400, (9,15):500,
           (10, 1): 380, (10, 2): 475, (10,3):380, (10,4):330, (10,5):395, (10,6):760, (10,7):950, (10,8):380, (10,9):600, (10,10):500, (10,11):105, (10,12):2850, (10,13):2100, (10,14):400, (10,15):500,
           (11, 1): 380, (11, 2): 475, (11,3):380, (11,4):330, (11,5):395, (11,6):760, (11,7):950, (11,8):380, (11,9):600, (11,10):500, (11,11):105, (11,12):2850, (11,13):2100, (11,14):400, (11,15):500,
           (12, 1): 380, (12, 2): 475, (12,3):380, (12,4):330, (12,5):395, (12,6):760, (12,7):950, (12,8):380, (12,9):600, (12,10):500, (12,11):105, (12,12):2850, (12,13):2100, (12,14):400, (12,15):500,
           (13, 1): 380, (13, 2): 475, (13,3):380, (13,4):330, (13,5):395, (13,6):760, (13,7):950, (13,8):380, (13,9):600, (13,10):500, (13,11):105, (13,12):2850, (13,13):2100, (13,14):400, (13,15):500,
           (14, 1): 380, (14, 2): 475, (14,3):380, (14,4):330, (14,5):395, (14,6):760, (14,7):950, (14,8):380, (14,9):600, (14,10):500, (14,11):105, (14,12):2850, (14,13):2100, (14,14):400, (14,15):500,
           (15, 1): 380, (15, 2): 475, (15,3):380, (15,4):330, (15,5):395, (15,6):760, (15,7):950, (15,8):380, (15,9):600, (15,10):500, (15,11):105, (15,12):2850, (15,13):2100, (15,14):400, (15,15):500,
           (16, 1): 380, (16, 2): 475, (16,3):380, (16,4):330, (16,5):395, (16,6):760, (16,7):950, (16,8):380, (16,9):600, (16,10):500, (16,11):105, (16,12):2850, (16,13):2100, (16,14):400, (16,15):500,
                                                    (17, 1): 380, (17, 2): 475, (17,3):380, (17,4):330, (17,5):395, (17,6):760, (17,7):950, (17,8):380, (17,9):600, (17,10):500, (17,11):105, (17,12):2850, (17,13):2100, (17,14):400, (17,15):500,
                                                    (18, 1): 380, (18, 2): 475, (18,3):380, (18,4):330, (18,5):395, (18,6):760, (18,7):950, (18,8):380, (18,9):600, (18,10):500, (18,11):105, (18,12):2850, (18,13):2100, (18,14):400, (18,15):500,
                                                    (19, 1): 380, (19, 2): 475, (19,3):380, (19,4):330, (19,5):395, (19,6):760, (19,7):950, (19,8):380, (19,9):600, (19,10):500, (19,11):105, (19,12):2850, (19,13):2100, (19,14):400, (19,15):500,
                                                    (20, 1): 380, (20, 2): 475, (20,3):380, (20,4):330, (20,5):395, (20,6):760, (20,7):950, (20,8):380, (20,9):600, (20,10):500, (20,11):105, (20,12):2850, (20,13):2100, (20,14):400, (20,15):500,
                                                    (21, 1): 360, (21, 2): 450, (21,3):360, (21,4):315, (21,5):375, (21,6):720, (21,7):900, (21,8):360, (21,9):570, (21,10):475, (21,11):100, (21,12):2700, (21,13):2000, (21,14):380, (21,15):475,
                                                    (22, 1): 360, (22, 2): 450, (22,3):360, (22,4):315, (22,5):375, (22,6):720, (22,7):900, (22,8):360, (22,9):570, (22,10):475, (22,11):100, (22,12):2700, (22,13):2000, (22,14):380, (22,15):475,
                                                    (23, 1): 360, (23, 2): 450, (23,3):360, (23,4):315, (23,5):375, (23,6):720, (23,7):900, (23,8):360, (23,9):570, (23,10):475, (23,11):100, (23,12):2700, (23,13):2000, (23,14):380, (23,15):475,
                                                    (24, 1): 360, (24, 2): 450, (24,3):360, (24,4):315, (24,5):375, (24,6):720, (24,7):900, (24,8):360, (24,9):570, (24,10):475, (24,11):100, (24,12):2700, (24,13):2000, (24,14):380, (24,15):475,
                                                    (25, 1): 360, (25, 2): 450, (25,3):360, (25,4):315, (25,5):375, (25,6):720, (25,7):900, (25,8):360, (25,9):570, (25,10):475, (25,11):100, (25,12):2700, (25,13):2000, (25,14):380, (25,15):475,
                                                    (26, 1): 360, (26, 2): 450, (26, 3): 360, (26, 4): 315, (26, 5): 375, (26, 6): 720, (26, 7): 900, (26, 8): 360, (26, 9): 570, (26, 10): 475, (26, 11): 100, (26, 12): 2700, (26, 13): 2000,(26, 14): 380, (26, 15): 475
           }
model.djk = pyo.Param(model.J, model.K, initialize=djk_data)
# 耕地面
model.wj = pyo.Param(model.J, initialize={1:80, 2:55, 3:35, 4:72, 5:68, 6:55, 7:60, 8:46, 9:40, 10:28, 11:25, 12:86, 13:55, 14:44, 15:50, 16:25, 17:60, 18:45, 19:35, 20:20, 21:15, 22:13, 23:15, 24:18, 25:27, 26:20})


# 预期销售量
model.Sk = pyo.Param(model.K, initialize={1:57000, 2:21850, 3:22400, 4:33040, 5:9875, 6:170840, 7:132750, 8:71400, 9:30000, 10:12500, 11:1500, 12:35100, 13:36000, 14:14000, 15:10000})

# 销售单价

model.bk = pyo.Param(model.K, initialize={1:5.25, 2:7.5, 3:8.25, 4:7, 5:6.75, 6:3.5, 7:3, 8:6.75, 9:6, 10:7.5, 11:40, 12:1.5, 13:3.25, 14:5.5, 15:3.5})

# 单位亩数种植成本
model.Pk = pyo.Param(model.K, initialize={1:400, 2:400, 3:350, 4:350, 5:350, 6:450, 7:500, 8:360, 9:400, 10:360, 11:350, 12:1000, 13:2000, 14:400, 15:350})

# 豆类作物
model.Ck = pyo.Param(model.K, initialize={1:1, 2:1, 3:1, 4:1,5:1, 6:0, 7:0, 8:0, 9:0, 10:0, 11:0, 12:0, 13:0, 14:0, 15:0})

# 决策变量
model.Xijk = pyo.Var(model.I, model.J, model.K, within=pyo.Binary)

# 总产量和种植面积
def calculate_production_area(model, i):
    return sum(model.djk[j, k] * model.Xijk[i, j, k] * model.wj[j] for j in model.J), sum(model.Xijk[i, j, k] * model.wj[j] for j in model.J)

# 目标函数
def objective_rule(model):
    profit = sum(min(calculate_production_area(model, i)[0], model.Sk[k]) * model.bk[k] - calculate_production_area(model, i)[1] * model.Pk[k] * model.Xijk[i, j, k]
               for i in model.I for k in model.K)
    return profit
model.objective = pyo.Objective(rule=objective_rule, sense=pyo.maximize)

# 求解模型
solver = pyo.SolverFactory('glpk')
result = solver.solve(model)

# 输出结果
for i in model.I:
    for j in model.J:
        for k in model.K:
            if pyo.value(model.Xijk[i, j, k]) > 0.5:
                print(f"Year {i}, Plant {k} on plot {j} with decision variable value {pyo.value(model.Xijk[i, j, k])}")